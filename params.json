{"name":"Gossip.simulator","tagline":"Gossip simulator using akka actors","body":"Gossip.Simulator\r\n================\r\n\r\nGossip simulator using akka actor\r\n\r\nThe input provided (as command line to topologyTest.scala) will be of the form:\r\n\r\n  topologyTest.scala numNodes topology algorithm\r\n  \r\nWhere \r\nnumNodes is the number of actors involved (for 2D based topologies it is round up until it is a square),\r\ntopology is one of full, 2D, line, imp2D, \r\nalgorithm is one of gossip, push-sum.\r\n\r\nOutput: Print the amount of time it took to achieve convergence of the algorithm.\r\n\r\nThe actual network topology plays a critical role in the dissemination speed of Gossip protocols. This project experiments\r\nwith various topologies. The topology determines who is considered a neighbour in the above algorithms.\r\n\r\nCurrent Topologies Implemented\r\n===============================\r\n\u000F Full Network - Every actor is a neighbour of all other actors. That is,every actor can talk directly to any other actors.\r\n\r\n\u000F 2D Grid - Actors form a 2D grid. The actors can only talk to the grid neighbours.\r\n\r\n\u000F Line: Actors are arranged in a line. Each actor has only 2 neighbours (one left and one right, unless you are the first or last actor).\r\n\r\n\u000F Imperfect 2D Grid: Grid arrangement but one random other neighbour is selected from the list of all actors (4+1 neighbours).\r\n\r\nCommunication Algorithms\r\n==========================\r\nGossip Algorithm for information propagation ---->\r\n\r\n\u000F Starting: A participant(actor) it told/sent a rumor(fact) by the main process\r\n\r\n\u000F Step: Each actor selects a random neighbour and tells it the rumor\r\n\r\n\u000F Termination: Each actor keeps track of rumors and how many times it has heard the rumor. It stops transmitting once it has heard the rumor N times (N is currently set to 10 which is arbitrary, This parameter can be modified in the regularJoe class).\r\n              \r\nPush-Sum algorithm for sum computation  ---->\r\n\r\n\u000F State: Each actor Ai maintains two quantities: s and w. Initially, s = xi = i (that is actor number i has value i) and w = 1\r\n\u000F \r\nStarting: Ask one of the actors to start from the main process.\r\n\r\nReceive: Messages sent and received are pairs of the form (s;w). Upon receive, an actor should add received pair to its own corresponding values. Upon receive, each actor selects a random neighbour and sends it a message.\r\n\r\nSend: When sending a message to another actor, half of s and w is kept by the sending actor and half is placed in the message.\r\n\r\nSum estimate: At any given moment of time, the sum estimate is s/w where s and w are the current values of an actor.\r\n\r\nTermination: If an actors ratio s/w did not change more than 10^-10 in 3 consecutive rounds the actor terminates.\r\n\r\n\r\nBonus section\r\n================\r\n\r\nYet to Implement node failure (a node dies) and communication failure models (a connection dies temporarily or permanently)","google":"UA-27229044-1","note":"Don't delete this file! It's used internally to help with page regeneration."}